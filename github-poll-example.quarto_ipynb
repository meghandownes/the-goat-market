{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Quick Poll: Economic Concepts\"\n",
        "format: html\n",
        "sidebar: microeconomics\n",
        "jupyter: python3\n",
        "---\n",
        "\n",
        "\n",
        "\n",
        "::: {.poll-form}\n",
        "# Quick Economics Poll\n",
        "\n",
        "**Question:** What best describes the relationship between price and demand?\n",
        "\n",
        "<form id=\"pollForm\">\n",
        "  <div class=\"form-group\">\n",
        "    <input type=\"text\" id=\"studentName\" placeholder=\"Your name (for attendance)\" required style=\"width: 100%; padding: 0.5rem; margin-bottom: 1rem;\">\n",
        "  </div>\n",
        "  \n",
        "  <div class=\"form-group\">\n",
        "    <label>\n",
        "      <input type=\"radio\" name=\"answer\" value=\"inverse\" required> \n",
        "      **Inverse relationship** - As price increases, demand decreases\n",
        "    </label>\n",
        "  </div>\n",
        "  \n",
        "  <div class=\"form-group\">\n",
        "    <label>\n",
        "      <input type=\"radio\" name=\"answer\" value=\"direct\" required>\n",
        "      **Direct relationship** - As price increases, demand increases  \n",
        "    </label>\n",
        "  </div>\n",
        "  \n",
        "  <div class=\"form-group\">\n",
        "    <label>\n",
        "      <input type=\"radio\" name=\"answer\" value=\"no-relationship\" required>\n",
        "      **No relationship** - Price and demand are independent\n",
        "    </label>\n",
        "  </div>\n",
        "  \n",
        "  <button type=\"submit\" class=\"btn-poll\">Submit Response</button>\n",
        "</form>\n",
        ":::\n",
        "\n",
        "::: {.response-display}\n",
        "### Live Results\n",
        "<div id=\"results\">Loading results...</div>\n",
        "<button onclick=\"loadResults()\" class=\"btn-poll\" style=\"margin-top: 1rem;\">Refresh Results</button>\n",
        ":::\n",
        "\n",
        "<script>\n",
        "// Configuration\n",
        "const GITHUB_TOKEN = 'your_github_token'; // Store in GitHub Secrets for production\n",
        "const REPO_OWNER = 'your-username';\n",
        "const REPO_NAME = 'your-repo-name';\n",
        "const POLL_ISSUE_NUMBER = 1; // Create an issue for this poll\n",
        "\n",
        "// Submit poll response\n",
        "document.getElementById('pollForm').addEventListener('submit', async function(e) {\n",
        "    e.preventDefault();\n",
        "    \n",
        "    const name = document.getElementById('studentName').value;\n",
        "    const answer = document.querySelector('input[name=\"answer\"]:checked').value;\n",
        "    \n",
        "    const comment = `**Student:** ${name}\n",
        "**Answer:** ${answer}\n",
        "**Timestamp:** ${new Date().toISOString()}`;\n",
        "    \n",
        "    try {\n",
        "        const response = await fetch(`https://api.github.com/repos/${REPO_OWNER}/${REPO_NAME}/issues/${POLL_ISSUE_NUMBER}/comments`, {\n",
        "            method: 'POST',\n",
        "            headers: {\n",
        "                'Authorization': `token ${GITHUB_TOKEN}`,\n",
        "                'Accept': 'application/vnd.github.v3+json',\n",
        "                'Content-Type': 'application/json'\n",
        "            },\n",
        "            body: JSON.stringify({\n",
        "                body: comment\n",
        "            })\n",
        "        });\n",
        "        \n",
        "        if (response.ok) {\n",
        "            alert('Response submitted successfully!');\n",
        "            document.getElementById('pollForm').reset();\n",
        "            loadResults();\n",
        "        } else {\n",
        "            alert('Error submitting response. Please try again.');\n",
        "        }\n",
        "    } catch (error) {\n",
        "        console.error('Error:', error);\n",
        "        alert('Error submitting response. Please check your connection.');\n",
        "    }\n",
        "});\n",
        "\n",
        "// Load and display results\n",
        "async function loadResults() {\n",
        "    try {\n",
        "        const response = await fetch(`https://api.github.com/repos/${REPO_OWNER}/${REPO_NAME}/issues/${POLL_ISSUE_NUMBER}/comments`);\n",
        "        const comments = await response.json();\n",
        "        \n",
        "        // Parse results\n",
        "        const results = { inverse: 0, direct: 0, 'no-relationship': 0 };\n",
        "        const students = new Set();\n",
        "        \n",
        "        comments.forEach(comment => {\n",
        "            const lines = comment.body.split('\\n');\n",
        "            const studentLine = lines.find(line => line.startsWith('**Student:**'));\n",
        "            const answerLine = lines.find(line => line.startsWith('**Answer:**'));\n",
        "            \n",
        "            if (studentLine && answerLine) {\n",
        "                const student = studentLine.replace('**Student:**', '').trim();\n",
        "                const answer = answerLine.replace('**Answer:**', '').trim();\n",
        "                \n",
        "                // Only count each student once (prevent duplicate votes)\n",
        "                if (!students.has(student)) {\n",
        "                    students.add(student);\n",
        "                    if (results.hasOwnProperty(answer)) {\n",
        "                        results[answer]++;\n",
        "                    }\n",
        "                }\n",
        "            }\n",
        "        });\n",
        "        \n",
        "        // Display results\n",
        "        const total = students.size;\n",
        "        let html = `<h4>Results (${total} responses)</h4>`;\n",
        "        \n",
        "        const labels = {\n",
        "            'inverse': 'Inverse relationship (correct)',\n",
        "            'direct': 'Direct relationship', \n",
        "            'no-relationship': 'No relationship'\n",
        "        };\n",
        "        \n",
        "        Object.entries(results).forEach(([answer, count]) => {\n",
        "            const percentage = total > 0 ? Math.round((count / total) * 100) : 0;\n",
        "            html += `\n",
        "                <div style=\"margin: 0.5rem 0; display: flex; align-items: center;\">\n",
        "                    <div style=\"width: 200px; font-weight: 500;\">${labels[answer]}:</div>\n",
        "                    <div style=\"width: 100px; padding: 0.25rem 0.5rem; background: #007bff; color: white; text-align: center; border-radius: 0.25rem; margin-right: 1rem;\">\n",
        "                        ${count} (${percentage}%)\n",
        "                    </div>\n",
        "                    <div style=\"flex: 1; height: 20px; background: #e9ecef; border-radius: 10px; overflow: hidden;\">\n",
        "                        <div style=\"width: ${percentage}%; height: 100%; background: #007bff;\"></div>\n",
        "                    </div>\n",
        "                </div>\n",
        "            `;\n",
        "        });\n",
        "        \n",
        "        document.getElementById('results').innerHTML = html;\n",
        "        \n",
        "    } catch (error) {\n",
        "        console.error('Error loading results:', error);\n",
        "        document.getElementById('results').innerHTML = 'Error loading results. Please try again.';\n",
        "    }\n",
        "}\n",
        "\n",
        "// Load results when page loads\n",
        "document.addEventListener('DOMContentLoaded', loadResults);\n",
        "</script>\n",
        "\n",
        "---\n",
        "\n",
        "**Instructions for Instructor:**\n",
        "1. Create a GitHub issue in your repository titled \"Poll: Economic Concepts\"\n",
        "2. Note the issue number and update the `POLL_ISSUE_NUMBER` variable\n",
        "3. Create a Personal Access Token with repo permissions  \n",
        "4. Store the token securely (use GitHub Secrets for production)\n",
        "5. Students' responses will appear as comments on the issue"
      ],
      "id": "5286e280"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "/home/meghan-downes/quarto-env/share/jupyter/kernels/python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}