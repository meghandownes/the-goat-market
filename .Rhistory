if(length(need)>0){
install.packages(need)
lapply(need,require,character.only=TRUE)
}
}
#---Now apply to lists of packages
install.packages("tidyverse")
install.packages("chron")
data_pkgs <- c("datasets", "data.table", "tidycensus", "ggfortify",
"broom", "DT")
#scales has currency formats for plots
format_pkgs <- c("formattable","scales", "chron", "xts", "tools")
#nice themes and plot insetting
plot_pkgs <- c("ggpmisc", "ggpubr", "dygraphs", "RColorBrewer",
"threejs", "r2d3", "gganimate", "gifski", "gapminder",
"ggraph", "igraph", "data.tree", "packcircles", "treemap",
"ggrepel", "ggthemes")
#map interactions and functions
geospatial_pkgs <- c("leaflet", "raster", "tmap", "rmapshaper",
"tmaptools", "sf", "ggmap", "geosphere", "KernSmooth",
"stars", "terra")
devtools::install_github("rsbivand/sp@evolution")
Sys.setenv("_SP_EVOLUTION_STATUS_"=2)
#CRS("+proj=longlat")
#sf::st_crs()
#shiny
shiny_pkgs <- c("shiny", "shinydashboard", "flexdashboard", "shinyjs", "V8")
#---Load Function
#This checks if installed first
#Only installs missing
using<-function(...) {
libs<-unlist(list(...))
req<-unlist(lapply(libs,require,character.only=TRUE))
need<-libs[req==FALSE]
if(length(need)>0){
install.packages(need)
lapply(need,require,character.only=TRUE)
}
}
using(data_pkgs)
using(data_pkgs)
using(format_pkgs)
using(plot_pkgs)
using(geospatial_pkgs)
install.packages("leaflet")
install.packages("raster")
install.packages("tmap")
install.packages("rmapshaper")
install.packages("ggmap")
install.packages("geosphere")
install.packages("stars")
install.packages("terra")
install.packages("terra")
renv::snapshot()
renv::snapshot()
renv::snapshot()
git checkout --ours path/file
git checkout --ours main/_quarto.yml
git add _quarto.yml
git add "about.qmd"
git add about.qmd
x =10
2x +2x
x =10
y = 2*x +2*x
1 + 1
x =10
y = 2*x +2*x
quarto render
x = 10
y = 2*x +2*x
renv::status()
renv::snapshot()
# Load necessary libraries
library(tidyverse)
library(knitr)
library(kableExtra)
library(shinylive)
# Set chunk options
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
# Check if file exists in current directory
if (!file.exists("human-vs-ai-utility-mwtth.csv")) {
stop("CSV file not found. Please ensure 'human-vs-ai-utility-mwtth.csv' is in the same directory as this .qmd file")
}
# Check if file exists in current directory
if (!file.exists("data/human-vs-ai-utility-mwtth.csv")) {
stop("CSV file not found. Please ensure 'human-vs-ai-utility-mwtth.csv' is in the same directory as this .qmd file")
}
# Check if file exists in current directory
if (!file.exists("~/microeconomics/data/human-vs-ai-utility-mwtth.csv")) {
stop("CSV file not found. Please ensure 'human-vs-ai-utility-mwtth.csv' is in the same directory as this .qmd file")
}
# Check if file exists in current directory
if (!file.exists("/microeconomics/data/human-vs-ai-utility-mwtth.csv")) {
stop("CSV file not found. Please ensure 'human-vs-ai-utility-mwtth.csv' is in the same directory as this .qmd file")
}
# Check if file exists in current directory
if (!file.exists("~/microeconomics/data/human-vs-ai-utility-mwtth.csv")) {
stop("CSV file not found. Please ensure 'human-vs-ai-utility-mwtth.csv' is in the same directory as this .qmd file")
}
# Check if file exists in current directory
if (!file.exists("~/the-goat-market/microeconomics/data/human-vs-ai-utility-mwtth.csv")) {
stop("CSV file not found. Please ensure 'human-vs-ai-utility-mwtth.csv' is in the same directory as this .qmd file")
}
# Load the CSV data
data <- read.csv("human-vs-ai-utility-mwtth.csv", stringsAsFactors = FALSE)
# Check if file exists in current directory
if (!file.exists("~/the-goat-market/microeconomics/data/human-vs-ai-utility-mwtth.csv")) {
stop("CSV file not found. Please ensure 'human-vs-ai-utility-mwtth.csv' is in the same directory as this .qmd file")
}
# Load the CSV data
data <- read.csv("~/the-goat-market/microeconomics/data/human-vs-ai-utility-mwtth.csv", stringsAsFactors = FALSE)
# Rename columns for convenience
colnames(data) <- c("Timestamp", "Score", "Group", "Section")
# Convert Score to numeric and clean data
data$Score <- as.numeric(data$Score)
# Remove any rows with NA scores
data <- data[!is.na(data$Score), ]
# Display first few rows
head(data) %>%
kable(caption = "First 6 rows of the dataset") %>%
kable_styling(bootstrap_options = c("striped", "hover"))
renv::status()
renv::update()
renv::snapshot()
#| context: setup
library(shiny)
library(DT)
library(knitr)
library(rmarkdown)
library(htmltools)
library(downloadthis)
#| echo: false
div(
class = "card mb-4",
div(
class = "card-header bg-primary text-white",
h4("The Process of Wealth Creation Analysis", class = "card-title mb-0")
),
div(
class = "card-body",
p("This interactive assignment allows you to enter your experimental data and see calculations in real-time. Complete each section by entering your values and providing your analysis.")
)
)
#| echo: false
div(
class = "card mb-4",
div(
class = "card-header bg-primary text-white",
h4("The Process of Wealth Creation Analysis", class = "card-title mb-0")
),
div(
class = "card-body",
p("This interactive assignment allows you to enter your experimental data and see calculations in real-time. Complete each section by entering your values and providing your analysis.")
)
)
#| echo: false
div(
class = "card",
div(class = "card-header", h5("Personal Results")),
div(
class = "card-body",
fluidRow(
column(4, selectInput("completed_seal", "Completed a seal:", choices = c("", "Yes", "No"))),
column(4, numericInput("time_taken", "Time taken (minutes):", value = NA, min = 0, step = 0.1)),
column(4, numericInput("seals_attempted", "Seals attempted:", value = NA, min = 0, step = 1))
)
)
)
#| context: setup
library(shiny)
library(DT)
library(knitr)
library(rmarkdown)
library(htmltools)
library(downloadthis)
#| echo: false
div(
class = "card mb-4",
div(
class = "card-header bg-primary text-white",
h4("The Process of Wealth Creation Analysis", class = "card-title mb-0")
),
div(
class = "card-body",
p("This interactive assignment allows you to enter your experimental data and see calculations in real-time. Complete each section by entering your values and providing your analysis.")
)
)
#| echo: false
div(
class = "card",
div(class = "card-header", h5("Personal Results")),
div(
class = "card-body",
fluidRow(
column(4, selectInput("completed_seal", "Completed a seal:", choices = c("", "Yes", "No"))),
column(4, numericInput("time_taken", "Time taken (minutes):", value = NA, min = 0, step = 0.1)),
column(4, numericInput("seals_attempted", "Seals attempted:", value = NA, min = 0, step = 1))
)
)
)
#| echo: false
div(
class = "card mb-4",
div(
class = "card-header bg-primary text-white",
h4("The Process of Wealth Creation Analysis", class = "card-title mb-0")
),
div(
class = "card-body",
p("This interactive assignment allows you to enter your experimental data and see calculations in real-time. Complete each section by entering your values and providing your analysis.")
)
)
#| echo: false
div(
class = "card",
div(class = "card-header", h5("Personal Results")),
div(
class = "card-body",
fluidRow(
column(4, selectInput("completed_seal", "Completed a seal:", choices = c("", "Yes", "No"))),
column(4, numericInput("time_taken", "Time taken (minutes):", value = NA, min = 0, step = 0.1)),
column(4, numericInput("seals_attempted", "Seals attempted:", value = NA, min = 0, step = 1))
)
)
)
#| context: setup
library(shiny)
library(DT)
library(knitr)
library(rmarkdown)
library(htmltools)
library(downloadthis)
#| echo: false
div(
class = "card mb-4",
div(
class = "card-header bg-primary text-white",
h4("The Process of Wealth Creation Analysis", class = "card-title mb-0")
),
div(
class = "card-body",
p("This interactive assignment allows you to enter your experimental data and see calculations in real-time. Complete each section by entering your values and providing your analysis.")
)
)
import sys
install.packages("python")
renv::status()
renv::snapshot()
source("renv/activate.R")
Sys.setenv(RETICULATE_PYTHON = "/home/yourusername/quarto-env/bin/python")
source("renv/activate.R")
Sys.setenv(RETICULATE_PYTHON = "/home/meghan-downes/quarto-env/bin/python")
source("renv/activate.R")
Sys.setenv(RETICULATE_PYTHON = "~/home/meghan-downes/quarto-env/bin/python")
install.packages(c("boot", "lattice", "mgcv", "spatial"))
#| label: setup
#| include: false
library(ggplot2)
library(dplyr)
theme_set(theme_minimal())
#| label: solow-steady-state
#| fig-cap: "Solow model steady state with investment and depreciation curves."
k <- seq(0, 100, by = 1)
s <- 0.3
delta <- 0.05
invest <- s * k^0.5
deprec <- delta * k
ss_k <- (s / delta)^2
ss_idx <- which.min(abs(k - ss_k))
ss_y <- invest[ss_idx]
ss_df <- data.frame(k = ss_k, y = ss_y)
base_df <- data.frame(k = k, invest = invest, deprec = deprec)
library(scales)
ggplot(base_df, aes(x = k)) +
geom_line(aes(y = invest, color = "Investment: s k^{0.5}"), size = 1.1) +
geom_line(aes(y = deprec, color = "Depreciation: \u03B4 k"), size = 1.1, linetype = "dashed") +
geom_point(data = ss_df, aes(y = y), color = "black", size = 3) +
annotate("text", x = ss_k + 6, y = ss_y, label = "Steady State (k*)", hjust = 0) +
scale_color_manual(values = c("Investment: s k^{0.5}" = "#2C7FB8", "Depreciation: \u03B4 k" = "#D95F02")) +
labs(x = "Capital per Worker (k)", y = "Investment & Depreciation", color = "Curves", title = "Solow Model Steady State") +
xlim(0, 100) + ylim(0, max(invest, deprec))
#| label: solow-savings-change
#| fig-cap: "Solow model: effect of increased saving rate on steady state."
s1 <- 0.3
s2 <- 0.5
invest1 <- s1 * k^0.5
invest2 <- s2 * k^0.5
ss_k1 <- (s1 / delta)^2
ss_k2 <- (s2 / delta)^2
ss_df2 <- tibble(
label = c("Old SS", "New SS"),
k = c(ss_k1, ss_k2),
y = c(invest1[which.min(abs(k - ss_k1))], invest2[which.min(abs(k - ss_k2))])
)
plot_df <- tibble(
k = rep(k, 3),
y = c(invest1, invest2, deprec),
series = rep(c("Investment (s=0.3)", "Investment (s=0.5)", "Depreciation (\u03B4 k)"), each = length(k))
)
#| label: solow-savings-change
#| fig-cap: "Solow model: effect of increased saving rate on steady state."
s1 <- 0.3
s2 <- 0.5
invest1 <- s1 * k^0.5
invest2 <- s2 * k^0.5
ss_k1 <- (s1 / delta)^2
ss_k2 <- (s2 / delta)^2
ss_df2 <- tibble(
label = c("Old SS", "New SS"),
k = c(ss_k1, ss_k2),
y = c(invest1[which.min(abs(k - ss_k1))], invest2[which.min(abs(k - ss_k2))])
)
plot_df <- tibble(
k = rep(k, 3),
y = c(invest1, invest2, deprec),
series = rep(c("Investment (s=0.3)", "Investment (s=0.5)", "Depreciation (k)"), each = length(k))
)
#| label: solow-savings-change
#| fig-cap: "Solow model: effect of increased saving rate on steady state."
s1 <- 0.3
s2 <- 0.5
invest1 <- s1 * k^0.5
invest2 <- s2 * k^0.5
ss_k1 <- (s1 / delta)^2
ss_k2 <- (s2 / delta)^2
ss_df2 <- tibble(
label = c("Old SS", "New SS"),
k = c(ss_k1, ss_k2),
y = c(invest1[which.min(abs(k - ss_k1))], invest2[which.min(abs(k - ss_k2))])
)
plot_df <- tibble(
k = rep(k, 3),
y = c(invest1, invest2, deprec),
series = rep(c("Investment (s=0.3)", "Investment (s=0.5)", "Depreciation (k)"), each = length(k))
)
#| label: solow-savings-change
#| fig-cap: "Solow model: effect of increased saving rate on steady state."
s1 <- 0.3
s2 <- 0.5
invest1 <- s1 * k^0.5
invest2 <- s2 * k^0.5
ss_k1 <- (s1 / delta)^2
ss_k2 <- (s2 / delta)^2
ss_df2 <- tibble(
label = c("Old SS", "New SS"),
k = c(ss_k1, ss_k2),
y = c(invest1[which.min(abs(k - ss_k1))], invest2[which.min(abs(k - ss_k2))])
)
plot_df <- dplyr::bind_rows(
tibble::tibble(k = k, y = invest1, series = "Investment (s=0.3)"),
tibble::tibble(k = k, y = invest2, series = "Investment (s=0.5)"),
tibble::tibble(k = k, y = deprec, series = "Depreciation (k)")
)
ggplot(plot_df, aes(x = k, y = y, color = series)) +
geom_line(size = 1.1) +
geom_point(data = ss_df2, aes(x = k, y = y), color = "black", size = 3, inherit.aes = FALSE) +
ggrepel::geom_text_repel(data = ss_df2, aes(x = k, y = y, label = label), inherit.aes = FALSE, nudge_x = 5, size = 4) +
scale_color_manual(values = c("Investment (s=0.3)" = "#2C7FB8", "Investment (s=0.5)" = "#1A9850", "Depreciation (\u03B4 k)" = "#D95F02")) +
labs(x = "Capital per Worker (k)", y = "Investment & Depreciation", color = "Curves", title = "Saving Rate Increase and Steady States") +
xlim(0, 100) + ylim(0, max(invest2, deprec))
#| label: solow-depreciation-change
#| fig-cap: "Solow model: higher depreciation lowers the steady state."
delta1 <- 0.05
delta2 <- 0.10
invest <- s1 * k^0.5
dep1 <- delta1 * k
dep2 <- delta2 * k
ss_k_dep1 <- (s1 / delta1)^2
ss_k_dep2 <- (s1 / delta2)^2
ss_dep_df <- tibble(
label = c("Old SS (\u03B4=0.05)", "New SS (\u03B4=0.10)"),
k = c(ss_k_dep1, ss_k_dep2),
y = c(invest[which.min(abs(k - ss_k_dep1))], invest[which.min(abs(k - ss_k_dep2))])
)
plot_df_dep <- tibble(
k = rep(k, 3),
y = c(invest, dep1, dep2),
series = rep(c("Investment (s=0.3)", "Depreciation (0.05)", "Depreciation (0.10)"), each = length(k))
)
#| label: solow-savings-change
#| fig-cap: "Solow model: effect of increased saving rate on steady state."
s1 <- 0.3
s2 <- 0.5
invest1 <- s1 * k^0.5
invest2 <- s2 * k^0.5
ss_k1 <- (s1 / delta)^2
ss_k2 <- (s2 / delta)^2
ss_df2 <- tibble(
label = c("Old SS", "New SS"),
k = c(ss_k1, ss_k2),
y = c(invest1[which.min(abs(k - ss_k1))], invest2[which.min(abs(k - ss_k2))])
)
plot_df <- dplyr::bind_rows(
tibble(k = k, y = invest1, series = "Investment (s=0.3)"),
tibble(k = k, y = invest2, series = "Investment (s=0.5)"),
tibble(k = k, y = deprec, series = "Depreciation (δ k)")
)
ggplot(plot_df, aes(x = k, y = y, color = series)) +
geom_line(size = 1.1) +
geom_point(data = ss_df2, aes(x = k, y = y), color = "black", size = 3, inherit.aes = FALSE) +
ggrepel::geom_text_repel(data = ss_df2, aes(x = k, y = y, label = label), inherit.aes = FALSE, nudge_x = 5, size = 4) +
scale_color_manual(values = c("Investment (s=0.3)" = "#2C7FB8", "Investment (s=0.5)" = "#1A9850", "Depreciation (\u03B4 k)" = "#D95F02")) +
labs(x = "Capital per Worker (k)", y = "Investment & Depreciation", color = "Curves", title = "Saving Rate Increase and Steady States") +
xlim(0, 100) + ylim(0, max(invest2, deprec))
#| label: solow-depreciation-change
#| fig-cap: "Solow model: higher depreciation lowers the steady state."
delta1 <- 0.05
delta2 <- 0.10
invest <- s1 * k^0.5
dep1 <- delta1 * k
dep2 <- delta2 * k
ss_k_dep1 <- (s1 / delta1)^2
ss_k_dep2 <- (s1 / delta2)^2
ss_dep_df <- tibble(
label = c("Old SS (\u03B4=0.05)", "New SS (\u03B4=0.10)"),
k = c(ss_k_dep1, ss_k_dep2),
y = c(invest[which.min(abs(k - ss_k_dep1))], invest[which.min(abs(k - ss_k_dep2))])
)
plot_df_dep <- tibble(
k = rep(k, 3),
y = c(invest, dep1, dep2),
series = rep(c("Investment (s=0.3)", "Depreciation (0.05)", "Depreciation (0.10)"), each = length(k))
)
#| label: solow-depreciation-change
#| fig-cap: "Solow model: higher depreciation lowers the steady state."
delta1 <- 0.05
delta2 <- 0.10
invest <- s1 * k^0.5
dep1 <- delta1 * k
dep2 <- delta2 * k
ss_k_dep1 <- (s1 / delta1)^2
ss_k_dep2 <- (s1 / delta2)^2
ss_dep_df <- tibble(
label = c("Old SS (\u03B4=0.05)", "New SS (\u03B4=0.10)"),
k = c(ss_k_dep1, ss_k_dep2),
y = c(invest[which.min(abs(k - ss_k_dep1))], invest[which.min(abs(k - ss_k_dep2))])
)
plot_df_dep <- dplyr::bind_rows(
tibble(k = k, y = invest, series = "Investment (s=0.3)"),
tibble(k = k, y = dep1, series = "Depreciation (0.05)"),
tibble(k = k, y = dep2, series = "Depreciation (0.10)")
)
ggplot(plot_df_dep, aes(x = k, y = y, color = series)) +
geom_line(size = 1.1) +
geom_point(data = ss_dep_df, aes(x = k, y = y), color = "black", size = 3, inherit.aes = FALSE) +
ggrepel::geom_text_repel(data = ss_dep_df, aes(x = k, y = y, label = label), inherit.aes = FALSE, nudge_x = 5, size = 4) +
scale_color_manual(values = c("Investment (s=0.3)" = "#2C7FB8", "Depreciation (0.05)" = "#D95F02", "Depreciation (0.10)" = "#7570B3")) +
labs(x = "Capital per Worker (k)", y = "Investment & Depreciation", color = "Curves", title = "Depreciation Increase and Steady State") +
xlim(0, 100) + ylim(0, max(invest, dep2))
#| label: solow-convergence-time
#| fig-cap: "Time path of capital per worker converging to steady state."
# Simple geometric convergence illustration
k_star <- ss_k1
k0 <- 4
T <- 12
alpha <- 0.5  # closes half the gap each period
k_path <- numeric(T + 1)
k_path[1] <- k0
for (t in 1:T) {
k_path[t + 1] <- k_path[t] + alpha * (k_star - k_path[t])
}
conv_df <- tibble(period = 0:T, k = k_path)
ggplot(conv_df, aes(x = period, y = k)) +
geom_line(color = "#2C7FB8", size = 1.2) +
geom_hline(yintercept = k_star, linetype = "dashed", color = "#D95F02") +
annotate("text", x = T * 0.6, y = k_star + 1, label = "Steady State (k*)") +
labs(x = "Period", y = "Capital per Worker (k)", title = "Convergence to Steady State (Illustrative)")
#| label: solow-war-shock
#| fig-cap: "One-time capital destruction and recovery to steady state."
# Assume pre-shock k at steady state k_star, shock halves k, then convergence
k_pre <- k_star
k_shock <- k_pre / 2
T2 <- 10
k_path2 <- numeric(T2 + 1)
k_path2[1] <- k_shock
for (t in 1:T2) {
k_path2[t + 1] <- k_path2[t] + alpha * (k_star - k_path2[t])
}
conv_df2 <- tibble(period = 0:T2, k = k_path2)
ggplot(conv_df2, aes(x = period, y = k)) +
geom_line(color = "#1A9850", size = 1.2) +
geom_hline(yintercept = k_star, linetype = "dashed", color = "#D95F02") +
geom_point(aes(x = 0, y = k_shock), color = "black", size = 2) +
annotate("text", x = 0.5, y = k_shock + 1, label = "Shock: k halves") +
labs(x = "Period", y = "Capital per Worker (k)", title = "Capital Destruction and Recovery")
#| label: solow-war-shock
#| fig-cap: "One-time capital destruction and recovery to steady state."
# Assume pre-shock k at steady state k_star, shock halves k, then convergence
shock_df <- tibble(period = 0, k = k_shock)
ggplot(conv_df2, aes(x = period, y = k)) +
geom_line(color = "#1A9850", size = 1.2) +
geom_hline(yintercept = k_star, linetype = "dashed", color = "#D95F02") +
geom_point(data = shock_df, aes(x = period, y = k), color = "black", size = 2) +
annotate("text", x = 0.5, y = k_shock + 1, label = "Shock: k halves") +
labs(x = "Period", y = "Capital per Worker (k)", title = "Capital Destruction and Recovery")
renv::snapshot()
install.packages("ghapps")
library(ghapps)
file.edit("~/.Renviron")
library(ghapps)
jwt <- gh_app_jwt()
jwt <- gh_app_jwt()
library(ghapps)
# Generate JWT automatically
jwt <- gh_app_jwt()
file.edit("~/.Renviron")
library(ghapps)
# Generate JWT automatically
jwt <- gh_app_jwt()
GITHUB_APP_KEY_PATH=.keys/the-goat-market.2025-10-07.private-key.pem
file.edit(".keys/the-goat-market.2025-10-07.private-key.pem")
