---
title: "Firebase Debug Test"
format: html
sidebar: microeconomics
---

```{=html}
<!-- Firebase SDK -->
<script src="https://www.gstatic.com/firebasejs/9.22.0/firebase-app-compat.js"></script>
<script src="https://www.gstatic.com/firebasejs/9.22.0/firebase-auth-compat.js"></script>
<script src="https://www.gstatic.com/firebasejs/9.22.0/firebase-database-compat.js"></script>

<style>
.debug-container {
  max-width: 800px;
  margin: 2rem auto;
  padding: 2rem;
  background: #f8f9fa;
  border-radius: 0.5rem;
}
.debug-section {
  margin: 1rem 0;
  padding: 1rem;
  background: white;
  border-radius: 0.375rem;
  border-left: 4px solid #007bff;
}
.alert {
  padding: 1rem;
  margin: 1rem 0;
  border-radius: 0.375rem;
}
.alert-success { background: #d4edda; color: #155724; border: 1px solid #c3e6cb; }
.alert-danger { background: #f8d7da; color: #721c24; border: 1px solid #f5c6cb; }
.alert-warning { background: #fff3cd; color: #856404; border: 1px solid #ffeaa7; }
.btn {
  padding: 0.5rem 1rem;
  margin: 0.5rem;
  border: none;
  border-radius: 0.375rem;
  cursor: pointer;
  background: #007bff;
  color: white;
}
</style>

<div class="debug-container">
  <h2>üîç Firebase Connection Debugger</h2>
  
  <div class="debug-section">
    <h4>Step 1: Configuration Check</h4>
    <div id="config-check">Checking configuration...</div>
  </div>
  
  <div class="debug-section">
    <h4>Step 2: Firebase Initialization</h4>
    <div id="init-check">Not started</div>
  </div>
  
  <div class="debug-section">
    <h4>Step 3: Anonymous Authentication</h4>
    <div id="auth-check">Not started</div>
  </div>
  
  <div class="debug-section">
    <h4>Step 4: Database Connection Test</h4>
    <div id="db-check">Not started</div>
    <button onclick="testDatabaseWrite()" class="btn">Test Database Write</button>
  </div>
  
  <div class="debug-section">
    <h4>Step 5: Detailed Error Log</h4>
    <div id="error-log" style="background: #f8f9fa; padding: 1rem; border-radius: 0.25rem; font-family: monospace; font-size: 0.9em;">
      No errors yet...
    </div>
  </div>
</div>

<script>
// Your web app's Firebase configuration
const firebaseConfig = {
  apiKey: "AIzaSyCoSSQn0lKUOSomyDsZu_B-EHOXx7mDCLI",
  authDomain: "the-goat-market.firebaseapp.com",
  databaseURL: "https://the-goat-market-default-rtdb.firebaseio.com",
  projectId: "the-goat-market",
  storageBucket: "the-goat-market.firebasestorage.app",
  messagingSenderId: "54944137763",
  appId: "1:54944137763:web:1ac7fe7888eb5a671b6796"
};

// Initialize Firebase
const app = initializeApp(firebaseConfig);

// Logging function
function logMessage(step, message, type = 'info') {
  const timestamp = new Date().toLocaleTimeString();
  const logDiv = document.getElementById('error-log');
  const currentLog = logDiv.innerHTML === 'No errors yet...' ? '' : logDiv.innerHTML;
  
  const typeEmoji = {
    'success': '‚úÖ',
    'error': '‚ùå', 
    'warning': '‚ö†Ô∏è',
    'info': '‚ÑπÔ∏è'
  };
  
  logDiv.innerHTML = currentLog + `\\n${timestamp} ${typeEmoji[type]} [${step}] ${message}`;
  logDiv.scrollTop = logDiv.scrollHeight;
}

// Step 1: Check Configuration
function checkConfiguration() {
  const configDiv = document.getElementById('config-check');
  
  if (firebaseConfig.apiKey === "your-api-key-here") {
    configDiv.innerHTML = '<div class="alert alert-danger">‚ùå Configuration not updated! Please replace with your actual Firebase config.</div>';
    logMessage('CONFIG', 'Firebase configuration still has placeholder values', 'error');
    return false;
  }
  
  if (!firebaseConfig.databaseURL.includes('the-goat-market')) {
    configDiv.innerHTML = '<div class="alert alert-warning">‚ö†Ô∏è Database URL may be incorrect. Expected to contain "the-goat-market".</div>';
    logMessage('CONFIG', 'Database URL does not contain expected project name', 'warning');
  }
  
  configDiv.innerHTML = '<div class="alert alert-success">‚úÖ Configuration looks good!</div>';
  logMessage('CONFIG', 'Configuration validated successfully', 'success');
  return true;
}

// Step 2: Initialize Firebase
function initializeFirebase() {
  const initDiv = document.getElementById('init-check');
  
  try {
    firebase.initializeApp(firebaseConfig);
    initDiv.innerHTML = '<div class="alert alert-success">‚úÖ Firebase initialized successfully!</div>';
    logMessage('INIT', 'Firebase SDK initialized', 'success');
    
    window.db = firebase.database();
    window.auth = firebase.auth();
    
    logMessage('INIT', 'Database and Auth services created', 'success');
    return true;
  } catch (error) {
    initDiv.innerHTML = `<div class="alert alert-danger">‚ùå Initialization failed: ${error.message}</div>`;
    logMessage('INIT', `Initialization error: ${error.message}`, 'error');
    return false;
  }
}

// Step 3: Test Authentication
function testAuthentication() {
  const authDiv = document.getElementById('auth-check');
  
  if (!window.auth) {
    authDiv.innerHTML = '<div class="alert alert-danger">‚ùå Auth service not available</div>';
    logMessage('AUTH', 'Authentication service not initialized', 'error');
    return;
  }
  
  authDiv.innerHTML = '<div class="alert alert-warning">üîÑ Attempting anonymous sign-in...</div>';
  logMessage('AUTH', 'Starting anonymous authentication', 'info');
  
  window.auth.signInAnonymously()
    .then((result) => {
      authDiv.innerHTML = '<div class="alert alert-success">‚úÖ Anonymous authentication successful!</div>';
      logMessage('AUTH', `Authenticated with UID: ${result.user.uid.substring(0, 12)}...`, 'success');
      testDatabaseConnection();
    })
    .catch((error) => {
      authDiv.innerHTML = `<div class="alert alert-danger">‚ùå Authentication failed: ${error.message}</div>`;
      logMessage('AUTH', `Authentication error: ${error.code} - ${error.message}`, 'error');
    });
}

// Step 4: Test Database Connection
function testDatabaseConnection() {
  const dbDiv = document.getElementById('db-check');
  
  if (!window.db || !window.auth.currentUser) {
    dbDiv.innerHTML = '<div class="alert alert-danger">‚ùå Database or authentication not ready</div>';
    logMessage('DATABASE', 'Database test skipped - prerequisites not met', 'error');
    return;
  }
  
  dbDiv.innerHTML = '<div class="alert alert-warning">üîÑ Testing database connection...</div>';
  logMessage('DATABASE', 'Testing database connectivity', 'info');
  
  // Test read access
  window.db.ref('test').once('value')
    .then((snapshot) => {
      dbDiv.innerHTML = '<div class="alert alert-success">‚úÖ Database connection successful!</div>';
      logMessage('DATABASE', 'Database read test successful', 'success');
    })
    .catch((error) => {
      dbDiv.innerHTML = `<div class="alert alert-danger">‚ùå Database connection failed: ${error.message}</div>`;
      logMessage('DATABASE', `Database error: ${error.code} - ${error.message}`, 'error');
    });
}

// Test Database Write
function testDatabaseWrite() {
  if (!window.db || !window.auth.currentUser) {
    logMessage('WRITE', 'Write test failed - database or auth not ready', 'error');
    return;
  }
  
  const testData = {
    timestamp: Date.now(),
    test: 'connection',
    user: window.auth.currentUser.uid.substring(0, 8)
  };
  
  logMessage('WRITE', 'Attempting database write test', 'info');
  
  window.db.ref('debug-test').push(testData)
    .then(() => {
      logMessage('WRITE', 'Database write test successful!', 'success');
      alert('‚úÖ Database write successful! Check your Firebase console.');
    })
    .catch((error) => {
      logMessage('WRITE', `Database write error: ${error.code} - ${error.message}`, 'error');
    });
}

// Run tests on page load
document.addEventListener('DOMContentLoaded', function() {
  logMessage('SYSTEM', 'Debug session started', 'info');
  
  if (checkConfiguration()) {
    if (initializeFirebase()) {
      setTimeout(testAuthentication, 1000);
    }
  }
});
</script>
```